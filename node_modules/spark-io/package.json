{
  "name": "spark-io",
  "description": "Spark Core IO",
  "version": "0.5.1",
  "homepage": "https://github.com/rwaldron/spark-io",
  "author": {
    "name": "Rick Waldron",
    "email": "waldron.rick@gmail.com"
  },
  "contributors": [
    {
      "name": "Chris Williams",
      "email": "<chris@iterativedesigns.com"
    },
    {
      "name": "David Resseguie",
      "email": "<david@resseguie.com"
    },
    {
      "name": "Pawel Szymczykowski",
      "email": "<makenai@gmail.com"
    },
    {
      "name": "Remy Sharp",
      "email": "<remy@leftlogic.com"
    },
    {
      "name": "Ron Evans",
      "email": "<ron@hybridgroup.com"
    }
  ],
  "keywords": [
    "spark",
    "io",
    "arduino",
    "firmata",
    "johnny-five"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/rwaldron/spark-io.git"
  },
  "bugs": {
    "url": "https://github.com/rwaldron/spark-io/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/rwaldron/spark-io/blob/master/LICENSE-MIT"
    }
  ],
  "main": "lib/spark",
  "engines": {
    "node": ">=0.10.0"
  },
  "dependencies": {
    "es6-shim": "~0.9.2",
    "nanotimer": "0.3.0"
  },
  "devDependencies": {
    "sinon": "~1.7.3",
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-nodeunit": "~0.2.0",
    "grunt-contrib-watch": "~0.5.3",
    "grunt-jsbeautifier": "~0.2.2"
  },
  "scripts": {
    "test": "grunt"
  },
  "js-flags": "--harmony",
  "readme": "# Spark-io\n\n[![Build Status](https://travis-ci.org/rwaldron/spark-io.png?branch=master)](https://travis-ci.org/rwaldron/spark-io)\n\nSpark-io is a Firmata-compatibility IO class for writing node programs that interact with [Spark devices](http://docs.spark.io/). Spark-io was built at [Bocoup](http://bocoup.com/)\n\n### Getting Started\n\nIn order to use the spark-io library, you will need to load the special\n[voodoospark](https://github.com/voodootikigod/voodoospark) firmware onto your\ndevice. We recommend you review [VoodooSpark's Getting Started](https://github.com/voodootikigod/voodoospark#getting-started) before continuing.\n\nWe recommend storing the token and device id in a dot file containing these: \n\n```bash\nexport SPARK_TOKEN = \"...your token...\"\nexport SPARK_DEVICE_ID = \"...your device id...\"\n```\n\n\n\n### Blink an Led\n\n\nThe \"Hello World\" of microcontroller programming:\n\n```js\nvar Spark = require(\"spark-io\");\nvar board = new Spark({\n  token: process.env.SPARK_TOKEN,\n  deviceId: process.env.SPARK_DEVICE_ID\n});\n\nboard.on(\"ready\", function() {\n  console.log(\"CONNECTED\");\n  this.pinMode(\"D7\", this.MODES.OUTPUT);\n\n  var byte = 0;\n\n  // This will \"blink\" the on board led\n  setInterval(function() {\n    this.digitalWrite(\"D7\", (byte ^= 1));\n  }.bind(this), 500);\n});\n```\n\n### Johnny-Five IO Plugin\n\nSpark-IO can be used as an [IO Plugin](https://github.com/rwaldron/johnny-five/wiki/IO-Plugins) for [Johnny-Five](https://github.com/rwaldron/johnny-five):\n\n```js\nvar five = require(\"johnny-five\");\nvar Spark = require(\"spark-io\");\nvar board = new five.Board({\n  io: new Spark({\n    token: process.env.SPARK_TOKEN,\n    deviceId: process.env.SPARK_DEVICE_ID\n  })\n});\n\nboard.on(\"ready\", function() {\n  var led = new five.Led(\"D7\");\n  led.blink();\n});\n```\n\n\n### API\n\n**MODES**\n\n> The `MODES` property is available as a Spark instance property:\n\n```js\nvar board = new Spark(...);\nboard.MODES;\n```\n- INPUT: 0\n- OUTPUT: 1\n- ANALOG: 2\n- PWM: 3\n- SERVO: 4\n\n\n**pinMode(pin, MODE)**\n\n> Set a pin's mode to any one of the MODES\n\nExample:\n```js\nvar board = new Spark(...);\n\nboard.on(\"ready\", function() {\n\n  // Set digital pin 7 to OUTPUT:\n  this.pinMode(\"D7\", this.MODES.OUTPUT);\n\n  // or just use the integer:\n  this.pinMode(\"D7\", 1);\n\n});\n```\n\n\n\n**digitalWrite(pin, value)**\n\n> Sets the pin to `1` or `0`, which either connects it to 3.3V (the maximum voltage of the system) or to GND (ground).\n\nExample:\n```js\nvar board = new Spark(...);\n\nboard.on(\"ready\", function() {\n\n  // This will turn ON the on-board LED\n  this.digitalWrite(\"D7\", 1);\n\n  // OR...\n\n  // This will turn OFF the on-board LED\n  this.digitalWrite(\"D7\", 0);\n\n});\n```\n\n**analogWrite(pin, value)**\n\n> Sets the pin to an 8-bit value between 0 and 255, where 0 is the same as LOW and 255 is the same as HIGH. This is sort of like sending a voltage between 0 and 3.3V, but since this is a digital system, it uses a mechanism called Pulse Width Modulation, or PWM. You could use analogWrite to dim an LED, as an example. PWM is available on D0, D1, A0, A1, A4, A5, A6 and A7.\n\n\nExample:\n```js\nvar board = new Spark(...);\n\nboard.on(\"ready\", function() {\n\n  // Set an LED to full brightness\n  this.analogWrite(\"A7\", 255);\n\n  // OR...\n\n  // Set an LED to half brightness\n  this.analogWrite(\"A7\", 128);\n\n});\n```\n\n**servoWrite(pin, value)**\n\n> Sets the pin to a value between 0 and 180, where the value represents degrees of the servo horn. The value is converted to a PWM signal. PWM is available on D0, D1, A0, A1, A4, A5, A6 and A7.\n\nExample:\n```js\nvar board = new Spark(...);\n\nboard.on(\"ready\", function() {\n\n  // Move a servo to 90 degrees\n  this.servoWrite(\"D0\", 90);\n\n});\n```\n\n\n**digitalRead(pin, handler)** Setup a continuous read handler for specific digital pin (D0-D7).\n\n> This will read the digital value of a pin, which can be read as either HIGH or LOW. If you were to connect the pin to a 3.3V source, it would read HIGH (1); if you connect it to GND, it would read LOW (0).\n\nExample:\n```js\nvar board = new Spark(...);\n\nboard.on(\"ready\", function() {\n\n  // Log all the readings for D1\n  this.digitalRead(\"D1\", function(data) {\n    console.log(data);\n  });\n\n});\n```\n\n\n**analogRead(pin, handler)** Setup a continuous read handler for specific analog pin (A0-A7). Use with all analog sensors\n\n\nExample:\n```js\nvar board = new Spark(...);\n\nboard.on(\"ready\", function() {\n\n  // Log all the readings for A1\n  this.analogRead(\"A1\", function(data) {\n    console.log(data);\n  });\n\n});\n```\n\n\n\n### Notes\n\n- The Spark Core docs state that PWM is available on A0, A1, A4, A5, A6, A7, D0 and D1. These pins have now all been confirmed and are supported as of v0.4.0.\n\n## License\nSee LICENSE file.\n",
  "readmeFilename": "readme.md",
  "_id": "spark-io@0.5.1",
  "_from": "spark-io@"
}
